/**
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/record', 'N/search', 'N/email', 'N/runtime', 'N/format'],
/**
 * @param {record} record
 * @param {search} search
 */
function(record, search, email, runtime, format) {
    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	//search: NS ACS | Invoice Populator Search
    	var savedSearchID = '171108';
    	return search.load({
    		id: savedSearchID
    	});
    }

    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
    	var searchResult = JSON.parse(context.value);
    	log.debug('search result', searchResult);
    	var invoiceID = searchResult.values["GROUP(internalid)"];
    	log.debug('invoiceID', invoiceID.value);
    	
    	log.debug('Processing Invoice internal ID', invoiceID.value);
    	try{
    		invcProcess(invoiceID.value);
    	}
    	catch(e){
    		log.error('Error occurred', e);
    	}
    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {
    	//Summarize the data from the MAP/Reduce. For logging purposes.
    	log.audit('Summary Data', summary);
        log.audit({
            title: 'Usage units consumed', 
            details: summary.usage
        });
        log.audit({
            title: 'Concurrency',
            details: summary.concurrency
        });
        log.audit({
            title: 'Number of yields', 
            details: summary.yields
        });
    }

    return {
        getInputData: getInputData,
        map: map,
        summarize: summarize
    };
    
    function invcProcess(internalid){
    	var ticketAvailable = false;
        var customerId = '';
        var loyaltyFound = false;
    	//Lookup ticket number field from invoice record
    	var fieldLookUp = search.lookupFields({
    	    type: search.Type.INVOICE,
    	    id: internalid,
    	    columns: ['custbody_spos_posticketnumber']
    	});
    	
    	//Get the ticket number field from the invoice record
    	var ticketnum = fieldLookUp['custbody_spos_posticketnumber'];
    	
    	if(ticketnum == '' || ticketnum == null){
    		ticketAvailable = false;
    	}
    	else{
    		ticketAvailable = true;
    	}
    	
        //Create Saved Allocation Mapping Search for comparison
        var customerMapping = search.create({
            type: search.Type.CUSTOMER,
            columns: ['internalid'],
            filters: [{name: 'custentity_spos_entityloyaltynumber', operator: 'is', values: ticketnum}]
        });
        
        //Runs the search only expecting one result to be the same exact match.
        customerMapping.run().each(function(result){
            try{
                customerId = result.getValue({ name: 'internalid'});
                loyaltyFound = true;
            }
            catch(e){
                //No results returned from saved search
                log.debug('No search results', e);
            }
        });
        
        /*
         * Loyalty Customer Update Status IDs
         * 1 - Update
         * 2 - No Loyalty ID
         * 3 - Loyalty ID not found
         */
        
        if(loyaltyFound == true){
        	var recordsubmit = record.submitFields({
        	    type: record.Type.INVOICE,
        	    id: internalid,
        	    values: {
        	    	custbody_loyalty_customer: customerId,
        	    	custbody_loyalty_cust_update_status: 1
        	    },
        	    options: {
        	        enableSourcing: false,
        	        ignoreMandatoryFields : true
        	    }
        	});
        	log.debug('Invoice record updated.', recordsubmit);
        }
        else if(loyaltyFound == false && ticketAvailable == true){
        	var recordsubmit = record.submitFields({
        	    type: record.Type.INVOICE,
        	    id: internalid,
        	    values: {
        	    	custbody_loyalty_cust_update_status: 2
        	    },
        	    options: {
        	        enableSourcing: false,
        	        ignoreMandatoryFields : true
        	    }
        	});
        	log.debug('Invoice record updated.', recordsubmit);
        }
        else if(ticketAvailable == false){
        	var recordsubmit = record.submitFields({
        	    type: record.Type.INVOICE,
        	    id: internalid,
        	    values: {
        	    	custbody_loyalty_cust_update_status: 3
        	    },
        	    options: {
        	        enableSourcing: false,
        	        ignoreMandatoryFields : true
        	    }
        	});
        	log.debug('Invoice record updated.', recordsubmit);
        }
    }
});
